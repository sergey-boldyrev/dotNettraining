//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApplication1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyBook", Namespace="http://schemas.datacontract.org/2004/07/BookCardIndexServiceLib")]
    [System.SerializableAttribute()]
    public partial class MyBook : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AuthorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PublishedField;
        //private string[] authors_arr;
        //private int published_int;

        public MyBook(string name, string[] authors_arr, int published_int, int id)
        {
            Name = name;
            Authors = authors_arr;
            Published = published_int;
            Id = id;
        }

        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Authors {
            get {
                return this.AuthorsField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorsField, value) != true)) {
                    this.AuthorsField = value;
                    this.RaisePropertyChanged("Authors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Published {
            get {
                return this.PublishedField;
            }
            set {
                if ((this.PublishedField.Equals(value) != true)) {
                    this.PublishedField = value;
                    this.RaisePropertyChanged("Published");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBookCardIndexService")]
    public interface IBookCardIndexService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/GetBookByID", ReplyAction="http://tempuri.org/IBookCardIndexService/GetBookByIDResponse")]
        WpfApplication1.ServiceReference1.MyBook GetBookByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/GetBookByID", ReplyAction="http://tempuri.org/IBookCardIndexService/GetBookByIDResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.MyBook> GetBookByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/GetBookByName", ReplyAction="http://tempuri.org/IBookCardIndexService/GetBookByNameResponse")]
        WpfApplication1.ServiceReference1.MyBook GetBookByName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/GetBookByName", ReplyAction="http://tempuri.org/IBookCardIndexService/GetBookByNameResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.MyBook> GetBookByNameAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/GetBookCount", ReplyAction="http://tempuri.org/IBookCardIndexService/GetBookCountResponse")]
        int GetBookCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/GetBookCount", ReplyAction="http://tempuri.org/IBookCardIndexService/GetBookCountResponse")]
        System.Threading.Tasks.Task<int> GetBookCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/GetBookList", ReplyAction="http://tempuri.org/IBookCardIndexService/GetBookListResponse")]
        WpfApplication1.ServiceReference1.MyBook[] GetBookList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/GetBookList", ReplyAction="http://tempuri.org/IBookCardIndexService/GetBookListResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.MyBook[]> GetBookListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/StoreNewBook", ReplyAction="http://tempuri.org/IBookCardIndexService/StoreNewBookResponse")]
        int StoreNewBook(WpfApplication1.ServiceReference1.MyBook new_one);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/StoreNewBook", ReplyAction="http://tempuri.org/IBookCardIndexService/StoreNewBookResponse")]
        System.Threading.Tasks.Task<int> StoreNewBookAsync(WpfApplication1.ServiceReference1.MyBook new_one);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/VerifyName", ReplyAction="http://tempuri.org/IBookCardIndexService/VerifyNameResponse")]
        bool VerifyName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/VerifyName", ReplyAction="http://tempuri.org/IBookCardIndexService/VerifyNameResponse")]
        System.Threading.Tasks.Task<bool> VerifyNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/VerifyAuthors", ReplyAction="http://tempuri.org/IBookCardIndexService/VerifyAuthorsResponse")]
        bool VerifyAuthors(string authors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/VerifyAuthors", ReplyAction="http://tempuri.org/IBookCardIndexService/VerifyAuthorsResponse")]
        System.Threading.Tasks.Task<bool> VerifyAuthorsAsync(string authors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/VerifyYear", ReplyAction="http://tempuri.org/IBookCardIndexService/VerifyYearResponse")]
        bool VerifyYear(string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookCardIndexService/VerifyYear", ReplyAction="http://tempuri.org/IBookCardIndexService/VerifyYearResponse")]
        System.Threading.Tasks.Task<bool> VerifyYearAsync(string year);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBookCardIndexServiceChannel : WpfApplication1.ServiceReference1.IBookCardIndexService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BookCardIndexServiceClient : System.ServiceModel.ClientBase<WpfApplication1.ServiceReference1.IBookCardIndexService>, WpfApplication1.ServiceReference1.IBookCardIndexService {
        
        public BookCardIndexServiceClient() {
        }
        
        public BookCardIndexServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BookCardIndexServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BookCardIndexServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BookCardIndexServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WpfApplication1.ServiceReference1.MyBook GetBookByID(int ID) {
            return base.Channel.GetBookByID(ID);
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.MyBook> GetBookByIDAsync(int ID) {
            return base.Channel.GetBookByIDAsync(ID);
        }
        
        public WpfApplication1.ServiceReference1.MyBook GetBookByName(string Name) {
            return base.Channel.GetBookByName(Name);
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.MyBook> GetBookByNameAsync(string Name) {
            return base.Channel.GetBookByNameAsync(Name);
        }
        
        public int GetBookCount() {
            return base.Channel.GetBookCount();
        }
        
        public System.Threading.Tasks.Task<int> GetBookCountAsync() {
            return base.Channel.GetBookCountAsync();
        }
        
        public WpfApplication1.ServiceReference1.MyBook[] GetBookList() {
            return base.Channel.GetBookList();
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.MyBook[]> GetBookListAsync() {
            return base.Channel.GetBookListAsync();
        }
        
        public int StoreNewBook(WpfApplication1.ServiceReference1.MyBook new_one) {
            return base.Channel.StoreNewBook(new_one);
        }
        
        public System.Threading.Tasks.Task<int> StoreNewBookAsync(WpfApplication1.ServiceReference1.MyBook new_one) {
            return base.Channel.StoreNewBookAsync(new_one);
        }
        
        public bool VerifyName(string name) {
            return base.Channel.VerifyName(name);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyNameAsync(string name) {
            return base.Channel.VerifyNameAsync(name);
        }
        
        public bool VerifyAuthors(string authors) {
            return base.Channel.VerifyAuthors(authors);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyAuthorsAsync(string authors) {
            return base.Channel.VerifyAuthorsAsync(authors);
        }
        
        public bool VerifyYear(string year) {
            return base.Channel.VerifyYear(year);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyYearAsync(string year) {
            return base.Channel.VerifyYearAsync(year);
        }
    }
}
